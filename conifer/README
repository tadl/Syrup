Syrup: A Reserves application
------------------------------

For more information, see
http://open-ils.org/dokuwiki/doku.php?id=scratchpad:reserves

or contact
Art Rhyno <artrhyno@uwindsor.ca>
Graham Fawcett <graham.fawcett@gmail.com>


State of the application
------------------------

Coming along nicely, thank you! With a bit of patience, you ought to
be able to get a basic Syrup system running in no time. Integrating it
with your backend library and other systems will take longer, of
course. See last section of this README for more details.

Syrup went into production at the University of Windsor in January 2011
and has now handled transitions between semesters. 

Required components
-------------------

You need Python. You also need sqlite3 or another Django-compatible
database. Sqlite3 is recommended for kicking the tires, PostgreSQL for
production.

Third-party Python dependencies:

  sudo easy_install Django Genshi Babel BabelDjango South Pyz3950 lxml ply

(You'll need 'setuptools' in order to have 'easy_install'.)

If lxml gives you trouble in linux, install python-xml instead:

sudo apt-get install python-lxml

Windows is very similar, use setuptools. The trickiest dependency might
be lxml here as well, it is possible to get a binary for it:

http://www.lfd.uci.edu/~gohlke/pythonlibs/#lxml

Getting this thing to run
-------------------------

This might work:

* Copy local_settings.py.example to local_settings.py, and review the settings

* Django 1.4 and above uses a different syntax for database settings, this will
work for syrup as well, see: https://docs.djangoproject.com/en/dev/ref/settings/#databases

* ./manage.py syncdb

Note: don't use the "./" syntax in windows for the commands, e.g.:

C:\src\syrup\trunk\conifer>manage.py syncdb

* During syncdb, create yourself a superuser account.

* ./manage.py migrate

* ./pybabel-extract  (currently, this is optional, used for internationalization)

* ./manage.py runserver

* visit http://localhost:8000/ and log in.

* create at least one Term and one Department under Admin Options.

* make yourself a course.

* click on all of the links and see what they do.

If you have been following along
--------------------------------

If you have an existing database, use south to deal with fields that have been added:

./manage.py schemamigration --auto conifer.syrup
./manage.py migrate conifer.syrup

If you are an evergreen site
----------------------------

Congratulations! Status information can be obtained without any additional
packages.

If you want to use Evergreen authentication and/or plan to update the catalogue
from syrup, you must fill in all the commented values in local_settings and
set EVERGREEN_AUTHENTICATION to True and install OpenSRF. Remember to install 
the python bindings with OpenSRF on the machine where Syrup sits, and 
take note of the dnsmasq section in the OpenSRF README.

You don't need to install the Evergreen server if it's not already there, but you do need
to copy or link the Open-ILS/src/python/oils directory from the server distribution in 
the active dist-packages folder, e.g. /usr/local/lib/python2.6/dist-packages

Integration is carried out through an intergration class, for Windsor we use
"conifer.integration.uwindsor.UWindsorIntegration", but this should be defined for your
institution. The "evergreen_example.py" file in the integration directory can be used as a
model. The "term_catalogue" function is where the academic terms, e.g. Fall 2013, 
are defined. We need to add an admin interface for this at some point.
