Syrup: A Reserves application
------------------------------

For more information, see
http://open-ils.org/dokuwiki/doku.php?id=scratchpad:reserves

or contact
Art Rhyno <artrhyno@uwindsor.ca>
Graham Fawcett <graham.fawcett@gmail.com>


State of the application
------------------------------

Coming along nicely, thank you! With a bit of patience, you ought to
be able to get a basic Syrup system running in no time. Integrating it
with your backend library and other systems will take longer, of
course.

Required components
------------------------------

You need Python. Probably Python 2.5, I haven't tested with other
versions. You also need sqlite3 or another Django-compatible
database. Sqlite3 is recommended for kicking the tires, PostgreSQL for
production.

Third-party Python dependencies:

  sudo easy_install Django Genshi Babel BabelDjango

(You'll need 'setuptools' in order to have 'easy_install'.)

Windows is very similar, see:

http://groups.google.com/group/syrup-reserves-discuss/web/installing-syrup-in-windows

Graham has the following versions installed. Not saying you need these
exact ones, just that they are known to work.

    Django-1.0.1_final-py2.5
    Babel-0.9.4-py2.5
    BabelDjango-0.2.2-py2.5
    Genshi-0.5.1-py2.5

Getting this thing to run
------------------------------

This might work:

* Review settings.py. Maybe you need to edit stuff. Probably not for a
  quick test.

* ./manage.py syncdb

Note: don't use the "./" syntax in windows for the commands, e.g.:

C:\src\syrup\trunk\conifer>manage.py syncdb

* During syncdb, create yourself a superuser account.

* ./pybabel-extract  (currently, this is optional)

* ./manage.py runserver

* visit http://localhost:8000/ and log in.

* create at least one Term and one Department under Admin Options.

* make yourself a course.

* click on all of the links and see what they do.


Contents [out of date -- Ed.]
------------------------------

syrup/			-- the reserves app
middleware/		-- middleware component to integrate Genshi
locale/			-- the gettext files
templates/		-- the Genshi templates
static/			-- static JS, CSS, image files
doc/			-- documentation on the app

local_settings.py.in    -- a template for local_settings.py
genshi_support.py	-- Genshi template integration
pybabel-extract		-- a "make all" for the i18n files
babel.cfg		-- Babel (i18n) configuration file

The rest is straightforward Django stuff.


Customization
------------------------------

The 'custom' directory contains (or should contain!)  all of the bits
that you really need to customize for your institution. More
documentation is needed here, but the source code is mostly
well-documented.